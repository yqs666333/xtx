(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{830:function(t,s,a){t.exports=a.p+"assets/img/ts-logo.a4a6165d.svg"},831:function(t,s,a){t.exports=a.p+"assets/img/tsc.ba55aed7.png"},832:function(t,s,a){t.exports=a.p+"assets/img/type1.bfcde653.png"},833:function(t,s,a){t.exports=a.p+"assets/img/function1.846fef23.png"},834:function(t,s,a){t.exports=a.p+"assets/img/function2.2ed70f4a.png"},835:function(t,s,a){t.exports=a.p+"assets/img/function3.22a97fa3.png"},836:function(t,s,a){t.exports=a.p+"assets/img/function4.e044a4c4.png"},837:function(t,s,a){t.exports=a.p+"assets/img/object1.27b0cf70.png"},838:function(t,s,a){t.exports=a.p+"assets/img/object2.b0db7b49.png"},839:function(t,s,a){t.exports=a.p+"assets/img/enum.3a7f7d5b.png"},840:function(t,s,a){t.exports=a.p+"assets/img/any.8102cf04.png"},841:function(t,s,a){t.exports=a.p+"assets/img/overlapping.077b286c.png"},842:function(t,s,a){t.exports=a.p+"assets/img/generics1.e257d8f0.png"},843:function(t,s,a){t.exports=a.p+"assets/img/generics2.219b939c.png"},844:function(t,s,a){t.exports=a.p+"assets/img/generics3.97c39a1b.png"},845:function(t,s,a){t.exports=a.p+"assets/img/generics4.08a9ca39.png"},846:function(t,s,a){t.exports=a.p+"assets/img/generics5.94fee0cf.png"},847:function(t,s,a){t.exports=a.p+"assets/img/generics6.7d3c66fa.png"},848:function(t,s,a){t.exports=a.p+"assets/img/generics7.6bb4a6d9.png"},849:function(t,s,a){t.exports=a.p+"assets/img/generics8.eaefbf67.png"},850:function(t,s,a){t.exports=a.p+"assets/img/generics10.bd9fc152.png"},851:function(t,s,a){t.exports=a.p+"assets/img/generics11.3e2bc01f.png"},852:function(t,s,a){t.exports=a.p+"assets/img/generics12.88eb3a71.png"},853:function(t,s,a){t.exports=a.p+"assets/img/generics13.8f689e73.png"},854:function(t,s,a){t.exports=a.p+"assets/img/index1.898c7bb0.png"},855:function(t,s,a){t.exports=a.p+"assets/img/index2.a3ef080c.png"},856:function(t,s,a){t.exports=a.p+"assets/img/map1.10922638.png"},857:function(t,s,a){t.exports=a.p+"assets/img/map2.8d94b3ae.png"},858:function(t,s,a){t.exports=a.p+"assets/img/map3.ec449018.png"},859:function(t,s,a){t.exports=a.p+"assets/img/map4.1898d3d0.png"},860:function(t,s,a){t.exports=a.p+"assets/img/map5.c0636a7e.png"},861:function(t,s,a){t.exports=a.p+"assets/img/declare1.fe51b1fe.png"},862:function(t,s,a){t.exports=a.p+"assets/img/declare2.2c0d3e25.png"},863:function(t,s,a){t.exports=a.p+"assets/img/declare3.1970de34.png"},888:function(t,s,a){"use strict";a.r(s);var n=a(115),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"typescript-基础"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#typescript-基础"}},[t._v("#")]),t._v(" TypeScript 基础")]),t._v(" "),n("p",[n("img",{attrs:{src:a(830),alt:"img"}})]),t._v(" "),n("h2",{attrs:{id:"概述"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),n("h3",{attrs:{id:"官方文档"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#官方文档"}},[t._v("#")]),t._v(" 官方文档")]),t._v(" "),n("blockquote",[n("p",[t._v("官方网址："),n("a",{attrs:{href:"https://www.typescriptlang.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("⚓https://www.typescriptlang.org/"),n("OutboundLink")],1)]),t._v(" "),n("p",[t._v("中文网址："),n("a",{attrs:{href:"https://www.tslang.cn/",target:"_blank",rel:"noopener noreferrer"}},[t._v("⚓https://www.tslang.cn/"),n("OutboundLink")],1)])]),t._v(" "),n("h3",{attrs:{id:"特点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#特点"}},[t._v("#")]),t._v(" 特点")]),t._v(" "),n("ul",[n("li",[t._v("TypeScript（简称：TS）是 JavaScript 的超集（JS 有的 TS 都有）。")]),t._v(" "),n("li",[t._v("TypeScript = Type + JavaScript（在 JS 基础之上，为 JS 添加了类型支持）。")]),t._v(" "),n("li",[t._v("TypeScript 是微软开发的开源编程语言，可以在任何运行 JavaScript 的地方运行。")])]),t._v(" "),n("h3",{attrs:{id:"ts-与-js-的对比"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ts-与-js-的对比"}},[t._v("#")]),t._v(" TS 与 JS 的对比")]),t._v(" "),n("ol",[n("li",[n("p",[t._v("更早（写代码的同时）发现错误，"),n("code",[t._v("减少找 Bug、改 Bug 时间")]),t._v("，提升开发效率。")])]),t._v(" "),n("li",[n("p",[t._v("程序中任何位置的代码都有"),n("code",[t._v("代码提示")]),t._v("，随时随地的安全感，增强了开发体验。")])]),t._v(" "),n("li",[n("p",[t._v("强大的"),n("code",[t._v("类型系统")]),t._v("提升了代码的可维护性，使得"),n("code",[t._v("重构代码更加容易")]),t._v("。")])]),t._v(" "),n("li",[n("p",[t._v("支持"),n("code",[t._v("最新的 ECMAScript 语法")]),t._v("，优先体验最新的语法，让你走在前端技术的最前沿。")])]),t._v(" "),n("li",[n("p",[t._v("TS"),n("code",[t._v("类型推断")]),t._v("机制，不需要在代码中的"),n("code",[t._v("每个地方都显示标注类型")]),t._v("，让你在享受优势的同时，尽量降低了成本。")])])]),t._v(" "),n("p",[t._v("除此之外，Vue 3 源码使用 TS 重写、Angular 默认支持 TS、React 与 TS 完美配合，TypeScript 已成为大中型前端")]),t._v(" "),n("p",[t._v("项目的首先编程语言。")]),t._v(" "),n("h2",{attrs:{id:"初体验"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#初体验"}},[t._v("#")]),t._v(" 初体验")]),t._v(" "),n("h3",{attrs:{id:"说明"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#说明"}},[t._v("#")]),t._v(" 说明")]),t._v(" "),n("p",[t._v("浏览器和 "),n("code",[t._v("node")]),t._v(" 环境中，并不能直接支持运行"),n("code",[t._v(".ts")]),t._v("的代码，我们必须借助于"),n("code",[t._v("typescript")]),t._v("这个全局包把"),n("code",[t._v(".ts")]),t._v("代码转成"),n("code",[t._v(".js")]),t._v("代码才能在node环境和浏览器环境中运行")]),t._v(" "),n("h3",{attrs:{id:"步骤"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#步骤"}},[t._v("#")]),t._v(" 步骤")]),t._v(" "),n("ol",[n("li",[n("p",[t._v("安装全局包 "),n("code",[t._v("npm i typescript -g")])])]),t._v(" "),n("li",[n("p",[t._v("在项目目录中创建"),n("code",[t._v("index.ts")]),t._v("，以"),n("code",[t._v(".ts")]),t._v("结尾的文件，代码如下")]),t._v(" "),n("div",{staticClass:"language-tsx extra-class"},[n("pre",{pre:!0,attrs:{class:"language-tsx"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" name"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'张三'")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" age"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("console")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token template-string"}},[n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("name is ")]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("name"),n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("，age is ")]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("age"),n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])]),t._v(" "),n("li",[n("p",[t._v("把终端切换到"),n("code",[t._v("index.ts")]),t._v("所在的目录，运行"),n("code",[t._v("tsc index.ts")]),t._v("把"),n("code",[t._v("ts")]),t._v("代码编译成"),n("code",[t._v("js")]),t._v("代码")])]),t._v(" "),n("li",[n("p",[t._v("把生成好的js代码，在node中运行或是在浏览器端环境中运行即可")])])]),t._v(" "),n("h3",{attrs:{id:"编译原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#编译原理"}},[t._v("#")]),t._v(" 编译原理")]),t._v(" "),n("p",[n("img",{attrs:{src:a(831),alt:"tsc"}})]),t._v(" "),n("h2",{attrs:{id:"类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#类型"}},[t._v("#")]),t._v(" 类型")]),t._v(" "),n("h3",{attrs:{id:"常用类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#常用类型"}},[t._v("#")]),t._v(" 常用类型")]),t._v(" "),n("h4",{attrs:{id:"概述-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#概述-2"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),n("p",[t._v("可以将 TS 中的常用基础类型细分为两类：1 JS 已有类型 2 TS 新增类型。")]),t._v(" "),n("p",[t._v("1.JS 已有类型")]),t._v(" "),n("p",[t._v("​\t原始类型：number/string/boolean/null/undefined/symbol。")]),t._v(" "),n("p",[t._v("​\t对象类型：object（包括，数组、对象、函数等对象）。")]),t._v(" "),n("p",[t._v("2.TS 新增类型")]),t._v(" "),n("p",[t._v("​\t联合类型、自定义类型（类型别名）、接口、元组、字面量类型、枚举、void、any 等。")]),t._v(" "),n("h4",{attrs:{id:"原始类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#原始类型"}},[t._v("#")]),t._v(" 原始类型")]),t._v(" "),n("p",[t._v("number/string/boolean/null/undefined/symbol。")]),t._v(" "),n("p",[t._v("特点：简单。这些类型，完全按照 JS 中类型的名称来书写。")]),t._v(" "),n("p",[t._v("例子：")]),t._v(" "),n("div",{staticClass:"language-tsx extra-class"},[n("pre",{pre:!0,attrs:{class:"language-tsx"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" name"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'张三'")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" age"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" isLoading"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("boolean")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n")])])]),n("h4",{attrs:{id:"对象类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#对象类型"}},[t._v("#")]),t._v(" 对象类型")]),t._v(" "),n("p",[t._v("对象类型：object（包括，数组、对象、函数等对象）。")]),t._v(" "),n("p",[t._v("特点：对象类型，在 TS 中更加细化，"),n("strong",[t._v("每个具体的对象都有自己的类型语法")]),t._v("。")]),t._v(" "),n("h3",{attrs:{id:"数组类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数组类型"}},[t._v("#")]),t._v(" 数组类型")]),t._v(" "),n("p",[n("code",[t._v("数组类型")]),t._v("的两种写法：（"),n("strong",[t._v("推荐使用")]),t._v(" "),n("strong",[t._v("number[]")]),t._v(" "),n("strong",[t._v("写法")]),t._v("）")]),t._v(" "),n("div",{staticClass:"language-tsx extra-class"},[n("pre",{pre:!0,attrs:{class:"language-tsx"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" numbers"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" strings"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Array")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'c'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),n("p",[t._v("需求：数组中既有 number 类型，又有 string 类型，这个数组的类型应该如何写？")]),t._v(" "),n("div",{staticClass:"language-tsx extra-class"},[n("pre",{pre:!0,attrs:{class:"language-tsx"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" arr"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),n("p",[t._v("解释："),n("code",[t._v("|")]),t._v(" （竖线）在 TS 中叫做"),n("code",[t._v("联合类型")]),t._v("（由两个或多个其他类型组成的类型，表示可以是这些类型中的任意一种）。")]),t._v(" "),n("p",[t._v("注意：这是 TS 中联合类型的语法，只有一根竖线，不要与 JS 中的或（||）混淆了。")]),t._v(" "),n("h3",{attrs:{id:"类型别名"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#类型别名"}},[t._v("#")]),t._v(" 类型别名")]),t._v(" "),n("p",[n("code",[t._v("类型别名")]),t._v("（自定义类型）：为任意类型起别名。")]),t._v(" "),n("p",[t._v("使用场景：当同一类型（复杂）被多次使用时，可以通过类型别名，"),n("code",[t._v("简化该类型的使用")]),t._v("。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(832),alt:"type1"}})]),t._v(" "),n("p",[t._v("解释：")]),t._v(" "),n("ol",[n("li",[n("p",[t._v("使用 "),n("code",[t._v("type")]),t._v(" 关键字来创建类型别名。")])]),t._v(" "),n("li",[n("p",[t._v("类型别名（比如，此处的 CustomArray），可以是任意合法的变量名称。")])]),t._v(" "),n("li",[n("p",[t._v("创建类型别名后，直接"),n("code",[t._v("使用该类型别名作为变量的类型注解")]),t._v("即可。")])])]),t._v(" "),n("h3",{attrs:{id:"函数类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#函数类型"}},[t._v("#")]),t._v(" 函数类型")]),t._v(" "),n("p",[t._v("函数的类型实际上指的是：函数"),n("code",[t._v("参数")]),t._v("和"),n("code",[t._v("返回值")]),t._v("的类型。")]),t._v(" "),n("p",[t._v("为函数指定类型的两种方式：1 单独指定参数、返回值的类型 2 同时指定参数、返回值的类型。")]),t._v(" "),n("ol",[n("li",[t._v("单独指定参数、返回值的类型：")])]),t._v(" "),n("p",[n("img",{attrs:{src:a(833),alt:"function1"}})]),t._v(" "),n("ol",{attrs:{start:"2"}},[n("li",[t._v("同时指定参数、返回值的类型：")])]),t._v(" "),n("p",[n("img",{attrs:{src:a(834),alt:"function2"}})]),t._v(" "),n("p",[t._v("如果函数没有返回值，那么，函数返回值类型为：void。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(835),alt:"function3"}})]),t._v(" "),n("p",[t._v("使用函数实现某个功能时，参数可以传也可以不传。这种情况下，在给函数参数指定类型时，就用到"),n("code",[t._v("可选参数")]),t._v("了。")]),t._v(" "),n("p",[t._v("比如，数组的 slice 方法，可以 slice() 也可以 slice(1) 还可以 slice(1, 3)。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(836),alt:"function4"}})]),t._v(" "),n("h3",{attrs:{id:"对象类型-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#对象类型-2"}},[t._v("#")]),t._v(" 对象类型")]),t._v(" "),n("p",[n("img",{attrs:{src:a(837),alt:"object1"}})]),t._v(" "),n("p",[n("img",{attrs:{src:a(838),alt:"object2"}})]),t._v(" "),n("h3",{attrs:{id:"接口"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#接口"}},[t._v("#")]),t._v(" 接口")]),t._v(" "),n("p",[t._v("当一个对象类型被多次使用时，一般会使用"),n("code",[t._v("接口（interface）")]),t._v("来描述对象的类型，达到"),n("code",[t._v("复用")]),t._v("的目的。")]),t._v(" "),n("p",[t._v("其实它是对对象类型的一个简化。")]),t._v(" "),n("p",[t._v("解释：")]),t._v(" "),n("ol",[n("li",[n("p",[t._v("使用 "),n("code",[t._v("interface")]),t._v(" 关键字来声明接口。")])]),t._v(" "),n("li",[n("p",[t._v("接口名称（比如，此处的 IPerson），可以是任意合法的变量名称。")])]),t._v(" "),n("li",[n("p",[t._v("声明接口后，直接"),n("code",[t._v("使用接口名称作为变量的类型")]),t._v("。")])]),t._v(" "),n("li",[n("p",[t._v("因为每一行只有一个属性类型，因此，属性类型后没有 ;（分号）。")])])]),t._v(" "),n("p",[t._v("语法：")]),t._v(" "),n("div",{staticClass:"language-tsx extra-class"},[n("pre",{pre:!0,attrs:{class:"language-tsx"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IPerson")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    name"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v("\n    age"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("sayHi")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" person"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" IPerson "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    name"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'张三'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    age"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("sayHi")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("接口（interface）和类型别名（type）的对比")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("相同点：都可以给对象指定类型。")])]),t._v(" "),n("li",[n("p",[t._v("不同点：")]),t._v(" "),n("p",[t._v("​\t 接口，只能为对象指定类型。")]),t._v(" "),n("p",[t._v("​\t 类型别名，不仅可以为对象指定类型，实际上可以为任意类型指定别名。")])])]),t._v(" "),n("p",[t._v("比较语法：")]),t._v(" "),n("div",{staticClass:"language-tsx extra-class"},[n("pre",{pre:!0,attrs:{class:"language-tsx"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 接口语法")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IPerson")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    name"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v("\n    age"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("sayHi")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   \n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 类型别名语法")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IPerson")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    name"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v("\n    age"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("sayHi")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   \n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 类型别名，不仅可以为对象指定类型，实际上可以为任意类型指定别名。")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NumStr")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v("\n")])])]),n("p",[t._v("接口继承：")]),t._v(" "),n("p",[t._v("如果两个接口之间有相同的属性或方法，可以"),n("code",[t._v("将公共的属性或方法抽离出来，通过继承来实现复用")]),t._v("。")]),t._v(" "),n("p",[t._v("例子：")]),t._v(" "),n("div",{staticClass:"language-tsx extra-class"},[n("pre",{pre:!0,attrs:{class:"language-tsx"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 比如，这两个接口都有 x、y 两个属性，重复写两次，可以，但很繁琐。")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Point2D")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("x"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" y"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Point3D")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("x"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" y"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" z"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 更好的方式")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Point2D")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("x"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" y"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Point3D")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Point2D")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("z"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 解释：")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1. 使用 extends（继承）关键字实现了接口 Point3D 继承 Point2D。")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2. 继承后，Point3D 就有了 Point2D 的所有属性和方法（此时，Point3D 同时有 x、y、z 三个属性）。")]),t._v("\n")])])]),n("h3",{attrs:{id:"元组"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#元组"}},[t._v("#")]),t._v(" 元组")]),t._v(" "),n("p",[t._v("场景：在地图中，使用经纬度坐标来标记位置信息。")]),t._v(" "),n("p",[t._v("可以使用数组来记录坐标，那么，该数组中只有两个元素，并且这两个元素都是数值类型。")]),t._v(" "),n("div",{staticClass:"language-tsx extra-class"},[n("pre",{pre:!0,attrs:{class:"language-tsx"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" position"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("39.5427")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("116.2317")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),n("p",[t._v("使用 number[] 的缺点：不严谨，因为该类型的数组中可以出现任意多个数字。")]),t._v(" "),n("p",[t._v("更好的方式："),n("code",[t._v("元组（Tuple）")]),t._v("。")]),t._v(" "),n("p",[t._v("元组类型是另一种类型的数组，它"),n("code",[t._v("确切地知道包含多少个元素，以及特定索引对应的类型")]),t._v("。")]),t._v(" "),n("div",{staticClass:"language-tsx extra-class"},[n("pre",{pre:!0,attrs:{class:"language-tsx"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" position"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("39.5427")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("116.2317")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 解释：")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1. 元组类型可以确切地标记出有多少个元素，以及每个元素的类型。")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2. 该示例中，元素有两个元素，每个元素的类型都是 number。")]),t._v("\n")])])]),n("h3",{attrs:{id:"类型推断和断言"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#类型推断和断言"}},[t._v("#")]),t._v(" 类型推断和断言")]),t._v(" "),n("h4",{attrs:{id:"类型推断"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#类型推断"}},[t._v("#")]),t._v(" 类型推断")]),t._v(" "),n("p",[t._v("在 TS 中，某些没有明确指出类型的地方，TS 的类型推论机制会帮助提供类型。")]),t._v(" "),n("p",[t._v("换句话说：由于类型推论的存在，这些地方，类型注解可以省略不写！")]),t._v(" "),n("p",[t._v("发生类型推论的 2 种常见场景：1 声明变量并初始化时 2 决定函数返回值时。")]),t._v(" "),n("p",[t._v("例子：")]),t._v(" "),n("div",{staticClass:"language-tsx extra-class"},[n("pre",{pre:!0,attrs:{class:"language-tsx"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" age "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// TS 自动推断出变量 age 为 number 类型")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num1"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" num2"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" num1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" num2\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// TS 自动推断出该函数的返回值类型为 number")]),t._v("\n")])])]),n("p",[t._v("推荐："),n("code",[t._v("能省略类型注解的地方就省略")]),t._v("（偷懒，充分利用TS类型推论的能力，提升开发效率）。")]),t._v(" "),n("h4",{attrs:{id:"类型断言"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#类型断言"}},[t._v("#")]),t._v(" 类型断言")]),t._v(" "),n("p",[t._v("有时候你会比 TS 更加明确一个值的类型，此时，可以使用类型断言来指定更具体的类型。")]),t._v(" "),n("p",[t._v("语法：宽泛类型 as 具体类型")]),t._v(" "),n("p",[t._v("例子：")]),t._v(" "),n("div",{staticClass:"language-tsx extra-class"},[n("pre",{pre:!0,attrs:{class:"language-tsx"}},[n("code",[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("a")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("href")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("http://www.itcast.cn"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("id")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("link"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),n("span",{pre:!0,attrs:{class:"token plain-text"}},[t._v("传智教育")]),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("a")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" aLink "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'link'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// aLink此时的类型为 HTMLElement")]),t._v("\naLink"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("href "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 此时会报错，没有提示")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 把 HTMLElement类型 断言成 HTMLAnchorElement 类型，这样再访问 aLink.href 就可以了")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" aLink "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'link'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" HTMLAnchorElement \naLink"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("href "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'http://www.itheima.com'")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 另一种语法，使用 <> 语法，这种语法形式不常用知道即可：")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" aLink "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HTMLAnchorElement")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),n("span",{pre:!0,attrs:{class:"token plain-text"}},[t._v("document.getElementById('link')\n")])])])]),n("p",[n("strong",[t._v("非空断言（!）")])]),t._v(" "),n("p",[t._v("作用："),n("code",[t._v("断言其操作内容是非 null 且非 undefined")]),t._v("，"),n("a",{attrs:{href:"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("文档链接"),n("OutboundLink")],1),t._v("（"),n("strong",[t._v("TS 提供的语法")]),t._v("）。")]),t._v(" "),n("p",[t._v("使用场景：某个值的类型包含 null 或 undefined。但是，在使用时我们确定该值一定存在。")]),t._v(" "),n("p",[t._v("此时，就可以使用"),n("code",[t._v("非空断言（!）")]),t._v("，"),n("strong",[t._v("告诉 TS 我很确定此处的值不可能为 null 或 undefined")]),t._v("。")]),t._v(" "),n("p",[t._v("这样，TS 就可以去掉类型中的 null 或 undefined 类型，从而在访问对象属性时不会报错。")]),t._v(" "),n("p",[t._v("注意："),n("code",[t._v("非空断言（!）")]),t._v("仅仅是从 TS 类型中去掉 null 或 undefined 类型，从而在访问对象属性时不会报错。")]),t._v(" "),n("p",[t._v("但是，"),n("strong",[t._v("该操作不保证代码运行的正确性")]),t._v("，如果值为 null 或 undefined，在代码运行时还是会报错！")]),t._v(" "),n("h3",{attrs:{id:"字面量类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#字面量类型"}},[t._v("#")]),t._v(" 字面量类型")]),t._v(" "),n("p",[t._v("某个特定的字符串也可以作为 TS 中的类型。例如：")]),t._v(" "),n("div",{staticClass:"language-tsx extra-class"},[n("pre",{pre:!0,attrs:{class:"language-tsx"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hello'")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// str1是string类型")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" str2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hello'")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// str2类型是 Hello")]),t._v("\n")])])]),n("p",[t._v("除字符串外，任意的 JS 字面量（比如，对象、数字等）都可以作为类型使用。")]),t._v(" "),n("p",[t._v("使用模式："),n("code",[t._v("字面量类型配合联合类型一起使用")]),t._v("。")]),t._v(" "),n("p",[t._v("使用场景："),n("code",[t._v("用来表示一组明确的可选值列表")]),t._v("。")]),t._v(" "),n("p",[t._v("比如，在贪吃蛇游戏中，游戏的方向的可选值只能是上、下、左、右中的任意一个。")]),t._v(" "),n("div",{staticClass:"language-tsx extra-class"},[n("pre",{pre:!0,attrs:{class:"language-tsx"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("changeDirection")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("direction"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'up'")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'down'")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'left'")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'right'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("console")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("direction"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("解释：参数 direction 的值只能是 up/down/left/right 中的任意一个。")]),t._v(" "),n("p",[t._v("优势：相比于 string 类型，使用字面量类型更加精确、严谨。")]),t._v(" "),n("h3",{attrs:{id:"枚举类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#枚举类型"}},[t._v("#")]),t._v(" 枚举类型")]),t._v(" "),n("p",[t._v("枚举的功能类似于字面量类型+联合类型组合的功能，也可以"),n("code",[t._v("表示一组明确的可选值")]),t._v("。")]),t._v(" "),n("p",[t._v("枚举："),n("code",[t._v("定义一组命名常量")]),t._v("。它描述一个值，该值可以是这些命名常量中的一个。")]),t._v(" "),n("p",[t._v("例子：")]),t._v(" "),n("div",{staticClass:"language-tsx extra-class"},[n("pre",{pre:!0,attrs:{class:"language-tsx"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" Direction "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" Up"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Down"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Left"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Right "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("changeDirection")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("direction"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Direction"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("console")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("direction"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注意：形参 direction 的类型为枚举 Direction，那么，实参的值就应该是枚举 Direction 成员的任意一个。 访问枚举成员：")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("changeDirection")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Direction"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("up"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//解释：类似于 JS 中的对象，直接通过点（.）语法访问枚举的成员。")]),t._v("\n")])])]),n("p",[t._v("解释：")]),t._v(" "),n("ol",[n("li",[n("p",[t._v("使用 "),n("code",[t._v("enum")]),t._v("关键字定义枚举。")])]),t._v(" "),n("li",[n("p",[t._v("约定枚举名称、枚举中的值以大写字母开头。")])]),t._v(" "),n("li",[n("p",[t._v("枚举中的多个值之间通过 ,（逗号）分隔。")])]),t._v(" "),n("li",[n("p",[t._v("定义好枚举后，直接使用枚举名称作为类型注解。")])])]),t._v(" "),n("h4",{attrs:{id:"注意"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#注意"}},[t._v("#")]),t._v(" 注意")]),t._v(" "),n("p",[n("code",[t._v("枚举成员是有值的")]),t._v("，默认为："),n("code",[t._v("从 0 开始自增的数值")]),t._v("。")]),t._v(" "),n("p",[t._v("我们把，枚举成员的值为数字的枚举，称为："),n("code",[t._v("数字枚举")]),t._v("。")]),t._v(" "),n("p",[t._v("当然，也可以给枚举中的成员初始化值。")]),t._v(" "),n("div",{staticClass:"language-tsx extra-class"},[n("pre",{pre:!0,attrs:{class:"language-tsx"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Down -> 11、Left -> 12、Right -> 13")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" Direction "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" Up "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Down"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Left，Right "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" Direction "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" Up "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Down "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Left "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v("，Right "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("字符串枚举：枚举成员的值是字符串。")]),t._v(" "),n("div",{staticClass:"language-tsx extra-class"},[n("pre",{pre:!0,attrs:{class:"language-tsx"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" Direction "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n    Up "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Up'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n    Down "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Down'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n    Left "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Left'")]),t._v("，\n    Right "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Right'")]),t._v(" \n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("注意：字符串枚举没有自增长行为，因此，"),n("code",[t._v("字符串枚举的每个成员必须有初始值")]),t._v("。")]),t._v(" "),n("h4",{attrs:{id:"其它"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#其它"}},[t._v("#")]),t._v(" 其它")]),t._v(" "),n("p",[t._v("枚举是 TS 为数不多的非 JavaScript 类型级扩展（不仅仅是类型）的特性之一。")]),t._v(" "),n("p",[t._v("因为：其他类型仅仅被当做类型，而"),n("code",[t._v("枚举不仅用作类型，还提供值")]),t._v("（枚举成员都是有值的）。")]),t._v(" "),n("p",[t._v("也就是说，其他的类型会在编译为 JS 代码时自动移除。但是，"),n("code",[t._v("枚举类型会被编译为 JS 代码")]),t._v("！")]),t._v(" "),n("p",[n("img",{attrs:{src:a(839),alt:"enum"}})]),t._v(" "),n("p",[t._v("说明：枚举与前面讲到的字面量类型+联合类型组合的功能类似，都用来表示一组明确的可选值列表。")]),t._v(" "),n("p",[t._v("一般情况下，"),n("code",[t._v("推荐使用字面量类型+联合类型组合的方式")]),t._v("，因为相比枚举，这种方式更加直观、简洁、高效。")]),t._v(" "),n("h3",{attrs:{id:"👎any-类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#👎any-类型"}},[t._v("#")]),t._v(" 👎Any 类型")]),t._v(" "),n("p",[t._v("原则："),n("strong",[t._v("不推荐使用 any")]),t._v("！这会让 TypeScript 变为 “AnyScript”（失去 TS 类型保护的优势）。")]),t._v(" "),n("p",[t._v("因为当值的类型为 any 时，可以对该值进行任意操作，并且不会有代码提示。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(840),alt:"any"}})]),t._v(" "),n("p",[t._v("解释：以上操作都不会有任何类型错误提示，即使可能存在错误！")]),t._v(" "),n("p",[t._v("尽可能的避免使用 any 类型，"),n("code",[t._v("除非临时使用 any")]),t._v("来“避免”书写很长、很复杂的类型！")]),t._v(" "),n("p",[t._v("其他隐式具有 any 类型的情况：1 声明变量不提供类型也不提供默认值 2 函数参数不加类型。")]),t._v(" "),n("p",[t._v("注意：因为不推荐使用 any，所以，这两种情况下都应该提供类型！")]),t._v(" "),n("h3",{attrs:{id:"其它-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#其它-2"}},[t._v("#")]),t._v(" 其它")]),t._v(" "),n("p",[n("strong",[t._v("typeof")])]),t._v(" "),n("p",[t._v("众所周知，JS 中提供了 typeof 操作符，用来在 JS 中获取数据的类型。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello World"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 打印 string")]),t._v("\n")])])]),n("p",[t._v("实际上，"),n("code",[t._v("TS 也提供了 typeof 操作符")]),t._v("：可以在"),n("strong",[t._v("类型上下文")]),t._v("中引用变量或属性的类型（类型查询）。")]),t._v(" "),n("p",[t._v("使用场景：根据已有变量的值，获取该值的类型，来简化类型书写。")]),t._v(" "),n("div",{staticClass:"language-tsx extra-class"},[n("pre",{pre:!0,attrs:{class:"language-tsx"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" p "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" x："),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("y"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("formatPoint")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("point"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("x"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" y"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("formatPoint")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("formatPoint")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("point"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" p"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("解释：")]),t._v(" "),n("ol",[n("li",[n("p",[t._v("使用 typeof 操作符来获取变量 p 的类型，结果与第一种（对象字面量形式的类型）相同。")])]),t._v(" "),n("li",[n("p",[t._v("typeof 出现在类型注解的位置（参数名称的冒号后面）所处的环境就在类型上下文（区别于 JS 代码）。")])]),t._v(" "),n("li",[n("p",[t._v("注意：typeof 只能用来查询变量或属性的类型，无法查询其他形式的类型（比如，函数调用的类型）。")])])]),t._v(" "),n("h2",{attrs:{id:"高级类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#高级类型"}},[t._v("#")]),t._v(" 高级类型")]),t._v(" "),n("h3",{attrs:{id:"交叉类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#交叉类型"}},[t._v("#")]),t._v(" 交叉类型")]),t._v(" "),n("p",[t._v("交叉类型（&）：功能类似于接口继承（extends），"),n("em",[n("strong",[t._v("用于组合多个类型为一个类型")])]),t._v("（"),n("strong",[t._v("常用于对象类型")]),t._v("）。")]),t._v(" "),n("p",[t._v("比如：")]),t._v(" "),n("div",{staticClass:"language-tsx extra-class"},[n("pre",{pre:!0,attrs:{class:"language-tsx"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" name"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Contact")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" phone"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PersonDetail")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Person "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" Contact\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" PersonDetail "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    name"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'jack'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    phone"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'13811111111'")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("解释：使用交叉类型后，新的类型 "),n("code",[t._v("PersonDetail")]),t._v(" 就"),n("code",[t._v("同时具备")]),t._v("了 Person 和 Contact 的所有属性类型。")]),t._v(" "),n("p",[t._v("相当于：")]),t._v(" "),n("div",{staticClass:"language-tsx extra-class"},[n("pre",{pre:!0,attrs:{class:"language-tsx"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PersonDetail")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" name"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" phone"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[n("img",{attrs:{src:a(841),alt:"overlapping"}})]),t._v(" "),n("h2",{attrs:{id:"泛型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#泛型"}},[t._v("#")]),t._v(" 泛型")]),t._v(" "),n("h3",{attrs:{id:"概念"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[t._v("#")]),t._v(" 概念")]),t._v(" "),n("p",[n("code",[t._v("泛型")]),t._v("是可以在"),n("code",[t._v("保证类型安全")]),t._v("前提下，让函数等"),n("code",[t._v("与多种类型一起工作")]),t._v("，从而"),n("code",[t._v("实现复用")]),t._v("，常用于："),n("code",[t._v("函数")]),t._v("、"),n("code",[t._v("接口")]),t._v("、"),n("code",[t._v("class")]),t._v(" 中。")]),t._v(" "),n("p",[t._v("需求：创建一个 id 函数，传入什么数据就返回该数据本身（也就是说，参数和返回值类型相同）。")]),t._v(" "),n("div",{staticClass:"language-jsx extra-class"},[n("pre",{pre:!0,attrs:{class:"language-jsx"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("id")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[n("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("value")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" number")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" number "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" value "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("比如，id(10) 调用以上函数就会直接返回 10 本身。但是，该函数只接收数值类型，无法用于其他类型。")]),t._v(" "),n("p",[t._v("为了能让函数能够接受任意类型，可以将参数类型修改为 any。但是，这样就失去了 TS 的类型保护，类型不安全。")]),t._v(" "),n("div",{staticClass:"language-tsx extra-class"},[n("pre",{pre:!0,attrs:{class:"language-tsx"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("id")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("any")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("any")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" value "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[n("strong",[t._v("泛型")]),t._v("在"),n("strong",[t._v("保证类型安全")]),t._v("（不丢失类型信息）的同时，可以"),n("strong",[t._v("让函数等与多种不同的类型一起工作")]),t._v("，灵活可"),n("strong",[t._v("复用")]),t._v("。")]),t._v(" "),n("p",[t._v("实际上，在 C＃和 Java 等编程语言中，泛型都是用来实现可复用组件功能的主要工具之一。")]),t._v(" "),n("h3",{attrs:{id:"创建泛型函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#创建泛型函数"}},[t._v("#")]),t._v(" 创建泛型函数")]),t._v(" "),n("div",{staticClass:"language-tsx extra-class"},[n("pre",{pre:!0,attrs:{class:"language-tsx"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token generic-function"}},[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("id")]),n("span",{pre:!0,attrs:{class:"token generic class-name"}},[n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Type"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Type"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Type "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" value "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("解释：")]),t._v(" "),n("ol",[n("li",[n("p",[t._v("语法：在函数名称的后面添加 "),n("code",[t._v("<>")]),t._v("（尖括号），"),n("code",[t._v("尖括号中添加类型变量")]),t._v("，比如此处的 Type。")])]),t._v(" "),n("li",[n("p",[n("code",[t._v("类型变量")]),t._v(" Type，"),n("code",[t._v("是一种特殊类型的变量")]),t._v("，"),n("code",[t._v("它处理类型")]),t._v("而不是值。")])]),t._v(" "),n("li",[n("p",[t._v("该类型变量相当于一个类型容器，能够捕获用户提供的类型（具体是什么类型由用户调用该函数时指定）。")])]),t._v(" "),n("li",[n("p",[t._v("因为 Type 是类型，因此可以将其作为函数参数和返回值的类型，表示参数和返回值具有相同的类型。")])]),t._v(" "),n("li",[n("p",[t._v("类型变量 Type，可以是任意合法的变量名称。")])])]),t._v(" "),n("h3",{attrs:{id:"调用泛型函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#调用泛型函数"}},[t._v("#")]),t._v(" 调用泛型函数")]),t._v(" "),n("p",[n("img",{attrs:{src:a(842),alt:"generics1"}})]),t._v(" "),n("p",[t._v("解释：")]),t._v(" "),n("ol",[n("li",[n("p",[t._v("语法：在函数名称的后面添加 "),n("code",[t._v("<>")]),t._v("（尖括号），"),n("code",[t._v("尖括号中指定具体的类型")]),t._v("，比如，此处的 number。")])]),t._v(" "),n("li",[n("p",[t._v("当传入类型 number 后，这个类型就会被函数声明时指定的类型变量 Type 捕获到。")])]),t._v(" "),n("li",[n("p",[t._v("此时，Type 的类型就是 number，所以，函数 id 参数和返回值的类型也都是 number。")])])]),t._v(" "),n("p",[t._v("同样，如果传入类型 string，函数 id 参数和返回值的类型就都是 string。")]),t._v(" "),n("p",[t._v("这样，通过"),n("code",[t._v("泛型")]),t._v("就做到了让 id 函数与多种不同的类型一起工作，"),n("code",[t._v("实现了复用的同时保证了类型安全")]),t._v("。")]),t._v(" "),n("h3",{attrs:{id:"简化调用泛型函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#简化调用泛型函数"}},[t._v("#")]),t._v(" 简化调用泛型函数")]),t._v(" "),n("p",[n("img",{attrs:{src:a(843),alt:"generics2"}})]),t._v(" "),n("p",[t._v("解释：")]),t._v(" "),n("ol",[n("li",[n("p",[t._v("在调用泛型函数时，"),n("code",[t._v("可以省略 <类型> 来简化泛型函数的调用")]),t._v("。")])]),t._v(" "),n("li",[n("p",[t._v("此时，TS 内部会采用一种叫做"),n("code",[t._v("类型参数推断")]),t._v("的机制，来根据传入的实参自动推断出类型变量 Type 的类型。")])]),t._v(" "),n("li",[n("p",[t._v("比如，传入实参 10，TS 会自动推断出变量 num 的类型 number，并作为 Type 的类型。")])])]),t._v(" "),n("p",[t._v("推荐：使用这种简化的方式调用泛型函数，使代码更短，更易于阅读。")]),t._v(" "),n("p",[t._v("说明：当编译器无法推断类型或者推断的类型不准确时，就需要显式地传入类型参数。")]),t._v(" "),n("h3",{attrs:{id:"泛型约束"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#泛型约束"}},[t._v("#")]),t._v(" 泛型约束")]),t._v(" "),n("p",[t._v("默认情况下，泛型函数的类型变量 Type 可以代表多个类型，这导致无法访问任何属性。")]),t._v(" "),n("p",[t._v("比如，id('a') 调用函数时获取参数的长度：")]),t._v(" "),n("p",[n("img",{attrs:{src:a(844),alt:"generics3"}})]),t._v(" "),n("p",[t._v("解释：Type 可以代表任意类型，无法保证一定存在 length 属性，比如 number 类型就没有 length。")]),t._v(" "),n("p",[t._v("此时，就需要为泛型"),n("code",[t._v("添加约束")]),t._v("来"),n("strong",[t._v("收缩类型")]),t._v("（缩窄类型取值范围）。")]),t._v(" "),n("p",[t._v("添加泛型约束收缩类型，主要有以下两种方式：1 指定更加具体的类型  2 添加约束。")]),t._v(" "),n("ol",[n("li",[n("code",[t._v("指定更加具体的类型")])])]),t._v(" "),n("p",[n("img",{attrs:{src:a(845),alt:"generics4"}})]),t._v(" "),n("p",[t._v("添加泛型约束收缩类型，主要有以下两种方式：1 指定更加具体的类型 2 添加约束。")]),t._v(" "),n("ol",{attrs:{start:"2"}},[n("li",[n("code",[t._v("添加约束")])])]),t._v(" "),n("p",[n("img",{attrs:{src:a(846),alt:"generics5"}})]),t._v(" "),n("p",[t._v("泛型的类型变量可以有多个，并且"),n("code",[t._v("类型变量之间还可以约束")]),t._v("（比如，第二个类型变量受第一个类型变量约束）。")]),t._v(" "),n("p",[t._v("比如，创建一个函数来获取对象中属性的值：")]),t._v(" "),n("p",[n("img",{attrs:{src:a(847),alt:"generics6"}})]),t._v(" "),n("h3",{attrs:{id:"泛型接口"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#泛型接口"}},[t._v("#")]),t._v(" 泛型接口")]),t._v(" "),n("p",[t._v("接口也可以配合泛型来使用，以增加其灵活性，增强其复用性。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(848),alt:"generics7"}})]),t._v(" "),n("p",[n("img",{attrs:{src:a(849),alt:"generics8"}})]),t._v(" "),n("h3",{attrs:{id:"泛型工具类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#泛型工具类型"}},[t._v("#")]),t._v(" 泛型工具类型")]),t._v(" "),n("p",[t._v("TS 内置了一些常用的工具类型，来简化 TS 中的一些常见操作。")]),t._v(" "),n("p",[t._v("说明：它们都是"),n("code",[t._v("基于泛型实现")]),t._v("的（泛型适用于多种类型，更加通用），并且是内置的，可以直接在代码中使用。")]),t._v(" "),n("p",[t._v("这些工具类型有很多，主要学习以下几个：")]),t._v(" "),n("ol",[n("li",[n("p",[n("code",[t._v("Partial<Type>")])])]),t._v(" "),n("li",[n("p",[n("code",[t._v("Readonly<Type>")])])]),t._v(" "),n("li",[n("p",[n("code",[t._v("Pick<Type, Keys>")])])]),t._v(" "),n("li",[n("p",[n("code",[t._v("Record<Keys, Type>")])])])]),t._v(" "),n("p",[n("img",{attrs:{src:a(850),alt:"generics10"}})]),t._v(" "),n("p",[n("img",{attrs:{src:a(851),alt:"generics11"}})]),t._v(" "),n("p",[n("img",{attrs:{src:a(852),alt:"generics12"}})]),t._v(" "),n("p",[n("img",{attrs:{src:a(853),alt:"generics13"}})]),t._v(" "),n("h2",{attrs:{id:"索引签名类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#索引签名类型"}},[t._v("#")]),t._v(" "),n("strong",[t._v("索引签名类型")])]),t._v(" "),n("p",[n("img",{attrs:{src:a(854),alt:"index1"}})]),t._v(" "),n("p",[n("img",{attrs:{src:a(855),alt:"index2"}})]),t._v(" "),n("h2",{attrs:{id:"映射类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#映射类型"}},[t._v("#")]),t._v(" 映射类型")]),t._v(" "),n("p",[t._v("基于旧类型创建新类型（对象类型），减少重复、提升开发效率。")]),t._v(" "),n("p",[t._v("比如，类型 PropKeys 有 x/y/z，另一个类型 Type1 中也有 x/y/z，并且 Type1 中 x/y/z 的类型相同：")]),t._v(" "),n("p",[n("img",{attrs:{src:a(856),alt:"map1"}})]),t._v(" "),n("p",[n("img",{attrs:{src:a(857),alt:"map2"}})]),t._v(" "),n("p",[n("img",{attrs:{src:a(858),alt:"map3"}})]),t._v(" "),n("p",[n("img",{attrs:{src:a(859),alt:"map4"}})]),t._v(" "),n("p",[n("img",{attrs:{src:a(860),alt:"map5"}})]),t._v(" "),n("h2",{attrs:{id:"类型声明文件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#类型声明文件"}},[t._v("#")]),t._v(" 类型声明文件")]),t._v(" "),n("h3",{attrs:{id:"概述-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#概述-3"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),n("p",[t._v("今天几乎所有的 JavaScript 应用都会引入许多第三方库来完成任务需求。")]),t._v(" "),n("p",[t._v("这些第三方库不管是否是用 TS 编写的，最终都要编译成 JS 代码，才能发布给开发者使用。")]),t._v(" "),n("p",[t._v("我们知道是 TS 提供了类型，才有了代码提示和类型保护等机制。")]),t._v(" "),n("p",[t._v("但在项目开发中使用第三方库时，你会发现它们几乎都有相应的 TS 类型，这些类型是怎么来的呢？"),n("code",[t._v("类型声明文件")])]),t._v(" "),n("p",[n("code",[t._v("类型声明文件：用来为已存在的 JS 库提供类型信息")]),t._v("。")]),t._v(" "),n("p",[t._v("这样在 TS 项目中使用这些库时，就像用 TS 一样，都会有代码提示、类型保护等机制了。")]),t._v(" "),n("ol",[n("li",[n("p",[t._v("TS 的两种文件类型")])]),t._v(" "),n("li",[n("p",[t._v("类型声明文件的使用说明")])])]),t._v(" "),n("h3",{attrs:{id:"ts-中的两种文件类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ts-中的两种文件类型"}},[t._v("#")]),t._v(" TS 中的两种文件类型")]),t._v(" "),n("p",[t._v("TS 中有两种文件类型：1 "),n("code",[t._v(".ts 文件")]),t._v(" 2 "),n("code",[t._v(".d.ts 文件")]),t._v("。")]),t._v(" "),n("ul",[n("li",[t._v(".ts 文件：")])]),t._v(" "),n("ol",[n("li",[n("code",[t._v("既包含类型信息又包含可执行代码")]),t._v("。")]),t._v(" "),n("li",[t._v("可以被编译为 .js 文件，然后，执行代码。")]),t._v(" "),n("li",[t._v("用途：编写程序代码的地方。")])]),t._v(" "),n("ul",[n("li",[t._v(".d.ts 文件：")])]),t._v(" "),n("ol",[n("li",[n("p",[n("code",[t._v("只包含类型信息")]),t._v("的类型声明文件。")])]),t._v(" "),n("li",[n("p",[n("code",[t._v("不会生成 .js 文件")]),t._v("，仅用于"),n("code",[t._v("提供类型信息")]),t._v("。")])]),t._v(" "),n("li",[n("p",[t._v("用途：为 JS 提供类型信息。")])])]),t._v(" "),n("p",[t._v("总结：.ts 是 implementation（代码实现文件）；"),n("strong",[t._v(".d.ts 是 declaration（类型声明文件）")]),t._v("。")]),t._v(" "),n("p",[t._v("如果要为 JS 库提供类型信息，要使用 .d.ts 文件。")]),t._v(" "),n("h3",{attrs:{id:"类型声明文件的使用说明"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#类型声明文件的使用说明"}},[t._v("#")]),t._v(" 类型声明文件的使用说明")]),t._v(" "),n("p",[t._v("在使用 TS 开发项目时，"),n("code",[t._v("类型声明文件的使用")]),t._v("包括以下两种方式：")]),t._v(" "),n("ol",[n("li",[n("p",[t._v("使用已有的类型声明文件")])]),t._v(" "),n("li",[n("p",[t._v("创建自己的类型声明文件")])])]),t._v(" "),n("p",[t._v("学习顺序："),n("code",[t._v("先会用")]),t._v("（别人的）"),n("code",[t._v("再会写")]),t._v("（自己的）。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(861),alt:"declare1"}})]),t._v(" "),n("p",[n("img",{attrs:{src:a(862),alt:"declare2"}})]),t._v(" "),n("p",[n("img",{attrs:{src:a(863),alt:"declare3"}})]),t._v(" "),n("p",[t._v("创建自己的类型声明文件：1 "),n("code",[t._v("项目内共享类型")]),t._v(" 2 "),n("code",[t._v("为已有 JS 文件提供类型声明")]),t._v("。")]),t._v(" "),n("p",[t._v("1、项目内共享类型：")]),t._v(" "),n("p",[n("code",[t._v("如果多个 .ts 文件")]),t._v("中都用到同一个类型，此时可以创建 "),n("code",[t._v(".d.ts")]),t._v(" 文件提供该类型，"),n("code",[t._v("实现类型共享")]),t._v("。")]),t._v(" "),n("p",[t._v("操作步骤：")]),t._v(" "),n("ol",[n("li",[t._v("创建 index."),n("code",[t._v("d.ts")]),t._v(" 类型声明文件。")]),t._v(" "),n("li",[t._v("创建需要共享的类型，并"),n("code",[t._v("使用 export 导出")]),t._v("（TS 中的类型也可以使用 import/export 实现模块化功能）。")]),t._v(" "),n("li",[t._v("在需要使用共享类型的 .ts 文件中，通过 import 导入即可（.d.ts 后缀导入时，直接省略）。")])]),t._v(" "),n("p",[t._v("2、为已有 JS 文件提供类型声明：")]),t._v(" "),n("ol",[n("li",[n("p",[t._v("在"),n("code",[t._v("将 JS 项目迁移到 TS 项目")]),t._v("时，为了让已有的 .js 文件有类型声明。")])]),t._v(" "),n("li",[n("p",[t._v("成为库作者，创建库给其他人使用。")])])]),t._v(" "),n("p",[t._v("注意："),n("code",[t._v("类型声明文件的编写与模块化方式相关")]),t._v("，不同的模块化方式有不同的写法。但由于历史原因，JS 模块化的发展")]),t._v(" "),n("p",[t._v("经历过多种变化（AMD、CommonJS、UMD、ESModule 等），而 TS 支持各种模块化形式的类型声明。这就导致")]),t._v(" "),n("p",[t._v("，类型声明文件相关内容又多又杂。")]),t._v(" "),n("p",[t._v("演示：基于"),n("code",[t._v("最新的 ESModule")]),t._v("（import/export）来为已有 .js 文件，创建类型声明文件。")]),t._v(" "),n("p",[t._v("开发环境准备：使用 webpack 搭建，通过 "),n("code",[t._v("ts-loader")]),t._v(" 处理 .ts 文件。")]),t._v(" "),n("p",[t._v("说明：TS 项目中也可以使用 .js 文件。")]),t._v(" "),n("p",[t._v("说明：在导入 .js 文件时，"),n("code",[t._v("TS 会自动加载与 .js 同名的 .d.ts 文件")]),t._v("，以提供类型声明。")]),t._v(" "),n("p",[n("code",[t._v("declare")]),t._v(" 关键字："),n("code",[t._v("用于类型声明")]),t._v("，"),n("code",[t._v("为其他地方")]),t._v("（比如，.js 文件）"),n("code",[t._v("已存在的变量声明类型，而不是创建一个新的变量")]),t._v("。")]),t._v(" "),n("ol",[n("li",[n("p",[t._v("对于 type、interface 等这些明确就是 TS 类型的（只能在 TS 中使用的），可以省略 declare 关键字。")])]),t._v(" "),n("li",[n("p",[t._v("对于 let、function 等具有双重含义（在 JS、TS 中都能用），应该使用 declare 关键字，明确指定此处用于类型声明。")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);